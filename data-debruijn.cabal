cabal-version:   3.4
name:            data-debruijn
version:         0.1.0.0
synopsis:        Fast and safe implementation of common compiler machinery.
description:
  This package provides a safe interface to optimised implementations of common
  machinery used in compilers and type checkers.

  [Type-Level Naturals]:
      "Data.Type.Nat"

      "Data.Type.Nat.Singleton"

  [DeBruijn Indexes]
      "Data.DeBruijn.Index"

  [Thinnings]
      "Data.DeBruijn.Thinning"

  [Environments]
      "Data.DeBruijn.Environment"

license:         AGPL-3.0-only
author:          Wen Kokke
maintainer:      wenkokke@users.noreply.github.com
copyright:
  2023-2025 (c) Wen Kokke
  2025 (c) April GonÃ§alves
  2025 (c) Well-Typed LLC

category:        Language
build-type:      Simple
extra-doc-files: CHANGELOG.md
tested-with:     GHC ==9.6.7 || ==9.8.4 || ==9.10.2 || ==9.12.2

source-repository head
  type:     git
  location: https://github.com/wenkokke/data-debruijn

--------------------------------------------------------------------------------
-- Feature Flags for Underlying Representation
--------------------------------------------------------------------------------

-- Representation: Use safe inductive definitions for all types.
flag safe
  description: Export the safe API.
  manual:      True
  default:     False

-- Representation: Natural Number Singletons
flag snat-as-word8
  description:
    Use a Word8 to represent natural number singletons.
    The default is Int.

  manual:      True
  default:     False

-- Representation: Indexes
flag ix-as-word8
  description:
    Use a Word8 to represent indexes.
    The default is Int.

  manual:      True
  default:     False

-- Representation: Thinnings
flag th-as-bitvec
  description:
    Use a Bit Vector to represent thinnings.
    The default is Natural.

  manual:      True
  default:     False

flag th-as-integer
  description:
    Use an Integer to represent thinnings. This is the default.
    The default is Natural.

  manual:      True
  default:     False

flag th-as-word64
  description:
    Use a Word to represent thinnings.
    The default is Natural.

  manual:      True
  default:     False

-- Representation: Environments
flag env-as-skew-list
  description:
    Use SkewList from the skew-list package to represent environments.
    The default is Seq from the containers package.

  manual:      True
  default:     False

common flags
  -- Check for Mutually Exclusive Flags
  if (((flag(th-as-bitvec) && flag(th-as-integer)) || (flag(th-as-bitvec) && flag(th-as-word64))) || (flag(th-as-integer) && flag(th-as-word64)))
    buildable: False

common language
  import:             flags
  ghc-options:
    -Wall -Wcompat -Widentities -Wprepositive-qualified-module
    -Wredundant-constraints -Wunticked-promoted-constructors
    -Wunused-packages

  default-language:   GHC2021
  default-extensions:
    ImportQualifiedPost
    NoFieldSelectors

library
  import:             language
  hs-source-dirs:     src
  default-extensions: NoImplicitPrelude
  build-depends:      data-debruijn:typenats
  reexported-modules: Data.Type.Nat
  exposed-modules:
    Data.DeBruijn.Environment
    Data.DeBruijn.Index
    Data.DeBruijn.Thinning
    Data.Type.Nat.Singleton

  if flag(safe)
    build-depends: data-debruijn:safe
    cpp-options:   -DEXPORT_SAFE_API

  else
    build-depends: data-debruijn:fast

  -- NOTE: GHC does not detect that the package "data-debruijn:typenats"
  --       is used by the "reexported-modules" declaration.
  ghc-options:        -Wno-unused-packages

library typenats
  import:          language
  visibility:      public
  hs-source-dirs:  src-typenats
  exposed-modules: Data.Type.Nat
  build-depends:   base >=4.17 && <5

library fast
  import:          language
  visibility:      public
  hs-source-dirs:  src-fast
  exposed-modules:
    Data.DeBruijn.Environment.Fast
    Data.DeBruijn.Index.Fast
    Data.DeBruijn.Thinning.Fast
    Data.Type.Nat.Singleton.Fast

  build-depends:
    , base                    >=4.17 && <5
    , data-debruijn:typenats
    , deepseq                 ^>=1.4 || ^>=1.5

  -- Representation: Natural Number Singletons
  if flag(snat-as-word8)
    cpp-options: -DSNAT_AS_WORD8

  else
    cpp-options: -DSNAT_AS_INT

  -- Representation: Indexes
  if flag(ix-as-word8)
    cpp-options: -DIX_AS_WORD8

  else
    cpp-options: -DIX_AS_INT

  -- Representation: Thinnings
  if flag(th-as-bitvec)
    cpp-options:   -DTH_AS_BITVEC
    build-depends:
      , bitvec  ^>=1.1
      , vector  ^>=0.13

  elif flag(th-as-integer)
    cpp-options: -DTH_AS_INTEGER

  elif flag(th-as-word64)
    cpp-options:   -DTH_AS_WORD64
    build-depends: ghc-prim ^>=0.9 || ^>=0.10 || ^>=0.11 || ^>=0.12 || ^>=0.13

  else
    cpp-options:   -DTH_AS_NATURAL
    build-depends:
      , ghc-bignum  ^>=1.3
      , ghc-prim    ^>=0.9 || ^>=0.10 || ^>=0.11 || ^>=0.12 || ^>=0.13

  -- Representation: Environments
  if flag(env-as-skew-list)
    cpp-options:   -DENV_AS_SKEW_LIST
    build-depends: skew-list ^>=0.1

  else
    cpp-options:   -DENV_AS_SEQ
    build-depends: containers >=0.6.7 && <0.9

library safe
  import:          language
  visibility:      public
  hs-source-dirs:  src-safe
  exposed-modules:
    Data.DeBruijn.Environment.Safe
    Data.DeBruijn.Index.Safe
    Data.DeBruijn.Thinning.Safe
    Data.Type.Nat.Singleton.Safe

  build-depends:
    , base                    >=4.17 && <5
    , data-debruijn:fast
    , data-debruijn:typenats
    , deepseq                 ^>=1.4 || ^>=1.5

library arbitrary
  import:          language
  visibility:      public
  hs-source-dirs:  src-arbitrary
  other-modules:   Test.QuickCheck.Extra
  exposed-modules:
    Data.DeBruijn.Index.Arbitrary
    Data.DeBruijn.Index.Fast.Arbitrary
    Data.DeBruijn.Index.Safe.Arbitrary
    Data.DeBruijn.Thinning.Arbitrary
    Data.DeBruijn.Thinning.Fast.Arbitrary
    Data.DeBruijn.Thinning.Safe.Arbitrary
    Data.Type.Nat.Singleton.Arbitrary
    Data.Type.Nat.Singleton.Fast.Arbitrary
    Data.Type.Nat.Singleton.Safe.Arbitrary

  build-depends:
    , base
    , data-debruijn:fast
    , data-debruijn:safe
    , data-debruijn:typenats
    , QuickCheck              >=2.9 && <3.0

library samples
  import:         language
  visibility:     private
  hs-source-dirs: doc/samples
  other-modules:  STLC
  build-depends:
    , base           >=4.17 && <5
    , data-debruijn

test-suite data-debruijn-tests
  import:         language
  type:           exitcode-stdio-1.0
  main-is:        Main.hs
  hs-source-dirs: test
  other-modules:
    Test.Data.DeBruijn.Index
    Test.Data.DeBruijn.Thinning
    Test.Data.Type.Nat.Singleton

  build-depends:
    , base
    , data-debruijn:arbitrary
    , data-debruijn:fast
    , data-debruijn:safe
    , tasty
    , tasty-quickcheck

benchmark bench-time
  import:         language
  type:           exitcode-stdio-1.0
  main-is:        Main.hs
  hs-source-dirs: bench-time
  other-modules:
    Bench.Time.Data.DeBruijn.Index
    Bench.Time.Data.DeBruijn.Thinning

  build-depends:
    , base                         >=4.17 && <5
    , criterion                    ^>=1.6
    , data-debruijn
    , data-debruijn:bench-samples
    , deepseq                      ^>=1.4 || ^>=1.5

benchmark bench-space
  import:         language
  type:           exitcode-stdio-1.0
  main-is:        Main.hs
  hs-source-dirs: bench-space
  other-modules:
    Bench.Space.Data.DeBruijn.Index
    Bench.Space.Data.DeBruijn.Thinning

  build-depends:
    , base                         >=4.17    && <5
    , bytestring
    , cassava                      ^>=0.5
    , data-debruijn
    , data-debruijn:bench-samples
    , deepseq                      ^>=1.4    || ^>=1.5
    , optparse-applicative         ^>=0.18   || ^>=0.19
    , weigh                        ^>=0.0.18

library bench-samples
  import:          language
  visibility:      private
  hs-source-dirs:  bench-samples
  exposed-modules: Bench.Samples.Data.DeBruijn.Thinning
  build-depends:   base >=4.17 && <5
