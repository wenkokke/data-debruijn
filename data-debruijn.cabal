cabal-version:   3.4
name:            data-debruijn
version:         0.0.0.0
synopsis:        fast and type-safe implementation of DeBruijn indices.
description:
  See <https://github.com/wenkokke/gilear/blob/main/packages/data-debruijn/#README>

license:         AGPL-3.0-only
author:          Wen Kokke
maintainer:      wenkokke@users.noreply.github.com
copyright:       2023 (c) Wen Kokke
category:        Language
build-type:      Simple
extra-doc-files: CHANGELOG.md

--------------------------------------------------------------------------------
-- Feature Flags for Underlying Representation
--------------------------------------------------------------------------------

-- Representation: Use safe inductive definitions for all types.
flag safe
  description: Export the safe API.
  manual:      True
  default:     False

-- Representation: Natural Number Singletons
flag snat-as-word8
  description: Use a Word8 to represent natural number singletons.
  manual:      True
  default:     False

flag snat-as-int
  description:
    Use an Int to represent natural number singletons. This is the default.

  manual:      True
  default:     True

-- Representation: Indexes
flag ix-as-word8
  description: Use a Word8 to represent indexes.
  manual:      True
  default:     False

flag ix-as-int
  description: Use an Int to represent indexes. This is the default.
  manual:      True
  default:     True

-- Representation: Thinnings
flag th-as-bitvec
  description: Use a Bit Vector to represent thinnings.
  manual:      True
  default:     False

flag th-as-integer
  description: Use an Integer to represent thinnings. This is the default.
  manual:      True
  default:     True

flag th-as-natural
  description: Use a Natural to represent thinnings.
  manual:      True
  default:     False

flag th-as-word64
  description: Use a Word to represent thinnings.
  manual:      True
  default:     False

-- Representation: Environments
flag env-as-seq
  description:
    Use Seq from the containers package to represent environments. This is the default.

  manual:      True
  default:     True

flag env-as-skew-list
  description:
    Use SkewList from the skew-list package to represent environments.

  manual:      True
  default:     False

common flags
  --------------------------------------------------------------------------------
  -- Check for Missing Flags
  --------------------------------------------------------------------------------

  --------------------------------------------------------------------------------
  -- Natural Number Singletons
  if (!flag(snat-as-word8) && !flag(snat-as-int))
    buildable: False

  --------------------------------------------------------------------------------
  -- Indexes
  if (!flag(ix-as-word8) && !flag(ix-as-int))
    buildable: False

  --------------------------------------------------------------------------------
  -- Thinnings
  if (((!flag(th-as-bitvec) && !flag(th-as-integer)) && !flag(th-as-natural)) && !flag(th-as-word64))
    buildable: False

  --------------------------------------------------------------------------------
  -- Environments
  if (!flag(env-as-seq) && !flag(env-as-skew-list))
    buildable: False

  --------------------------------------------------------------------------------
  -- Check for Mutually Exclusive Flags
  --------------------------------------------------------------------------------

  --------------------------------------------------------------------------------
  -- Natural Number Singletons
  if (flag(snat-as-word8) && flag(snat-as-int))
    buildable: False

  --------------------------------------------------------------------------------
  -- Indexes
  if (flag(ix-as-word8) && flag(ix-as-int))
    buildable: False

  --------------------------------------------------------------------------------
  -- Thinnings
  if ((((((flag(th-as-bitvec) && flag(th-as-integer)) || (flag(th-as-bitvec) && flag(th-as-natural))) || (flag(th-as-bitvec) && flag(th-as-word64))) || (flag(th-as-integer) && flag(th-as-natural))) || (flag(th-as-integer) && flag(th-as-word64))) || (flag(th-as-natural) && flag(th-as-word64)))
    buildable: False

  --------------------------------------------------------------------------------
  -- Environments
  if (flag(env-as-seq) && flag(env-as-skew-list))
    buildable: False

common language
  import:             flags
  ghc-options:
    -Wall -Wcompat -Widentities -Wprepositive-qualified-module
    -Wredundant-constraints -Wunticked-promoted-constructors
    -Wunused-packages

  default-language:   GHC2021
  default-extensions:
    ImportQualifiedPost
    NoFieldSelectors

library
  import:             language
  hs-source-dirs:     src
  default-extensions: NoImplicitPrelude
  build-depends:      data-debruijn:typenats
  reexported-modules: Data.Type.Nat
  exposed-modules:
    Data.DeBruijn.Environment
    Data.DeBruijn.Index
    Data.DeBruijn.Thinning
    Data.Type.Nat.Singleton

  if flag(safe)
    build-depends: data-debruijn:safe
    cpp-options:   -DEXPORT_SAFE_API

  else
    build-depends: data-debruijn:fast

  -- NOTE: GHC does not detect that the package "data-debruijn:typenats"
  --       is used by the "reexported-modules" declaration.
  ghc-options:        -Wno-unused-packages

library README
  import:         language
  visibility:     private
  hs-source-dirs: doc
  other-modules:  README
  build-depends:  base >=4.18 && <5

library samples
  import:         language
  visibility:     private
  hs-source-dirs: doc/samples
  other-modules:  STLC
  build-depends:
    , base           >=4.18 && <5
    , data-debruijn

library typenats
  import:          language
  visibility:      public
  hs-source-dirs:  src-typenats
  exposed-modules: Data.Type.Nat
  build-depends:   base >=4.18 && <5

library fast
  import:          language
  visibility:      public
  hs-source-dirs:  src-fast
  exposed-modules:
    Data.DeBruijn.Environment.Fast
    Data.DeBruijn.Index.Fast
    Data.DeBruijn.Thinning.Fast
    Data.Type.Nat.Singleton.Fast

  build-depends:
    , base                    >=4.18 && <5
    , data-debruijn:typenats
    , deepseq                 ^>=1.5

  -- Representation: Natural Number Singletons
  if flag(snat-as-word8)
    cpp-options: -DSNAT_AS_WORD8

  if flag(snat-as-int)
    cpp-options: -DSNAT_AS_INT

  -- Representation: Indexes
  if flag(ix-as-word8)
    cpp-options: -DIX_AS_WORD8

  if flag(ix-as-int)
    cpp-options: -DIX_AS_INT

  -- Representation: Thinnings
  if flag(th-as-bitvec)
    build-depends:
      , bitvec  ^>=1.1
      , vector  ^>=0.13

    cpp-options:   -DTH_AS_BITVEC

  if flag(th-as-integer)
    cpp-options: -DTH_AS_INTEGER

  if flag(th-as-natural)
    cpp-options: -DTH_AS_NATURAL

  if flag(th-as-word64)
    cpp-options: -DTH_AS_WORD64

  -- Representation: Environments
  if flag(env-as-seq)
    build-depends: containers >=0.6.8 && <0.9
    cpp-options:   -DENV_AS_SEQ

  if flag(env-as-skew-list)
    build-depends: skew-list ^>=0.1
    cpp-options:   -DENV_AS_SKEW_LIST

library safe
  import:          language
  visibility:      public
  hs-source-dirs:  src-safe
  exposed-modules:
    Data.DeBruijn.Environment.Safe
    Data.DeBruijn.Index.Safe
    Data.DeBruijn.Thinning.Safe
    Data.Type.Nat.Singleton.Safe

  build-depends:
    , base                    >=4.18 && <5
    , data-debruijn:fast
    , data-debruijn:typenats
    , deepseq                 ^>=1.5

library arbitrary
  import:          language
  visibility:      public
  hs-source-dirs:  src-arbitrary
  exposed-modules:
    Data.DeBruijn.Index.Arbitrary
    Data.DeBruijn.Index.Fast.Arbitrary
    Data.DeBruijn.Index.Safe.Arbitrary
    Data.DeBruijn.Thinning.Arbitrary
    Data.DeBruijn.Thinning.Fast.Arbitrary
    Data.DeBruijn.Thinning.Safe.Arbitrary
    Data.Type.Nat.Singleton.Fast.Arbitrary
    Data.Type.Nat.Singleton.Safe.Arbitrary
    Numeric.Natural.Arbitrary

  build-depends:
    , base
    , data-debruijn:fast
    , data-debruijn:safe
    , data-debruijn:typenats
    , QuickCheck              >=2.9 && <3.0

test-suite data-debruijn-tests
  import:         language
  type:           exitcode-stdio-1.0
  main-is:        Main.hs
  hs-source-dirs: test
  other-modules:
    Test.Data.DeBruijn.Index
    Test.Data.DeBruijn.Thinning
    Test.Data.Type.Nat.Singleton

  build-depends:
    , base
    , data-debruijn:arbitrary
    , data-debruijn:fast
    , data-debruijn:safe
    , tasty
    , tasty-quickcheck

benchmark bench-time
  import:         language
  type:           exitcode-stdio-1.0
  main-is:        Main.hs
  hs-source-dirs: bench-time
  other-modules:
    Bench.Time.Data.DeBruijn.Index
    Bench.Time.Data.DeBruijn.Thinning
    Bench.Time.Data.DeBruijn.Thinning.Samples

  build-depends:
    , base           >=4.18 && <5
    , criterion      ^>=1.6
    , data-debruijn
    , deepseq        ^>=1.5

benchmark bench-space
  import:         language
  type:           exitcode-stdio-1.0
  main-is:        Main.hs
  hs-source-dirs: bench-space
  other-modules:  Bench.Space.Data.DeBruijn.Index
  build-depends:
    , base           >=4.18    && <5
    , bytestring
    , cassava        ^>=0.5
    , data-debruijn
    , deepseq        ^>=1.5
    , weigh          ^>=0.0.18
